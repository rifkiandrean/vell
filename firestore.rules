/**
 * @fileoverview Firestore Security Rules for NikahGo wedding invitation app.
 *
 * Core Philosophy:
 * This ruleset provides open read access for most collections, leveraging anonymous authentication.
 * Write access is generally open to all authenticated and unauthenticated users given the anonymous nature of the app.
 *
 * Data Structure:
 * The Firestore database consists of several top-level collections:
 * - /rsvps/{rsvpId}: Stores RSVP information.
 * - /guestbook_messages/{messageId}: Stores guestbook messages.
 * - /sindi_rsvps/{rsvpId}: Stores RSVP information for Sindi's wedding.
 * - /sindi_guestbook_messages/{messageId}: Stores guestbook messages for Sindi's wedding.
 * - /weddings/{weddingId}: Stores general wedding details.
 * - /event_details/{eventId}: Stores wedding event details.
 * - /photos/{photoId}: Stores photo gallery images.
 *
 * Key Security Decisions:
 * - Open read access is granted for all users, including unauthenticated users.
 * - Write access is granted for all users, including unauthenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read and write RSVPs.
     * @path /rsvps/{rsvpId}
     * @allow (create, update, delete) Any user can create, update, or delete an RSVP.
     * @allow (get, list) Any user can read RSVP data.
     * @deny No denial cases.
     * @principle Open read and write access.
     */
    match /rsvps/{rsvpId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read and write guestbook messages.
     * @path /guestbook_messages/{messageId}
     * @allow (create, update, delete) Any user can create, update, or delete a guestbook message.
     * @allow (get, list) Any user can read guestbook messages.
     * @deny No denial cases.
     * @principle Open read and write access.
     */
    match /guestbook_messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read and write RSVP information for Sindi's wedding.
     * @path /sindi_rsvps/{rsvpId}
     * @allow (create, update, delete) Any user can create, update, or delete an RSVP.
     * @allow (get, list) Any user can read RSVP data.
     * @deny No denial cases.
     * @principle Open read and write access.
     */
    match /sindi_rsvps/{rsvpId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read and write guestbook messages for Sindi's wedding.
     * @path /sindi_guestbook_messages/{messageId}
     * @allow (create, update, delete) Any user can create, update, or delete a guestbook message.
     * @allow (get, list) Any user can read guestbook messages.
     * @deny No denial cases.
     * @principle Open read and write access.
     */
    match /sindi_guestbook_messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read and write wedding details.
     * @path /weddings/{weddingId}
     * @allow (create, update, delete) Any user can create, update, or delete wedding details.
     * @allow (get, list) Any user can read wedding details.
     * @deny No denial cases.
     * @principle Open read and write access.
     */
    match /weddings/{weddingId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read and write event details.
     * @path /event_details/{eventId}
     * @allow (create, update, delete) Any user can create, update, or delete event details.
     * @allow (get, list) Any user can read event details.
     * @deny No denial cases.
     * @principle Open read and write access.
     */
    match /event_details/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read and write photos.
     * @path /photos/{photoId}
     * @allow (create, update, delete) Any user can create, update, or delete photos.
     * @allow (get, list) Any user can read photos.
     * @deny No denial cases.
     * @principle Open read and write access.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }
}